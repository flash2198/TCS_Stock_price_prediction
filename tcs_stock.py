# -*- coding: utf-8 -*-
"""TCS_stock.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fp6tf0CrCi9NyRD2988x6Bhu2Hz7n_XY

## Importing libraries
"""

import pandas as pd
from sklearn import preprocessing
import numpy as np
import datetime
import matplotlib.pyplot as plt

"""## Reading data"""

dataset=pd.read_csv('/content/TCS.csv',index_col=['Date'],parse_dates=True)
dataset_new=pd.read_csv('/content/TCS.New.csv',index_col=['Date'],parse_dates=True)

dataset_new.head()

dataset.head()

dataset.isna().sum()

dataset_new.info()

dataset.info()

dataset.drop(['Symbol','Series','Trades','Prev Close','VWAP','Turnover','Trades','Deliverable Volume','%Deliverble','Last'],axis=1,inplace=True)

dataset.info()

dataset_new.drop(['Adj Close'],axis=1,inplace=True)

dataset=pd.concat([dataset,dataset_new])

"""## Visualizing data"""

dataset['Open'].plot(figsize=(16,8))

dataset['Open'].plot(figsize=(16,6))
dataset.rolling(window=30).mean()['Close'].plot()

dataset['Close: 30 Day Mean'] = dataset['Close'].rolling(window=30).mean()
dataset[['Close','Close: 30 Day Mean']].plot(figsize=(16,6))

dataset['Close'].expanding(min_periods=1).mean().plot(figsize=(16,6))

"""## Preprocessing data"""

training_set=dataset['Open']
training_set=pd.DataFrame(training_set)

"""## Normalization"""

# Feature Scaling
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)

len(training_set_scaled)

"""## Creating training data"""

X = []
y = []
# Time stamps of 30 ticks
for i in range(30, 4106):
    X.append(training_set_scaled[i-30:i, 0])
    y.append(training_set_scaled[i, 0])
X, y = np.array(X), np.array(y)
print(y.shape)

# Reshaping
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

X.shape

"""## Spliting data for training and testing"""

x_train=X[:4056]
y_train=y[:4056]
x_test=X[4056:]
y_test=y[4056:]

"""## Inverse_transforming testing data"""

y_test=y_test.reshape(-1,1)
y_test=sc.inverse_transform(y_test)

y_test

"""## Importing modules"""

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout

"""## Creating Model"""

regressor = Sequential()

# Adding the first LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X.shape[1], 1)))
regressor.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
regressor.add(LSTM(units = 50))
regressor.add(Dropout(0.2))

# Adding the output layer
regressor.add(Dense(units = 1))

"""## Fiting data to our model
We are trying to predict the stock price on every 30th day
"""

regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

# Fitting the RNN to the Training set
regressor.fit(x_train, y_train, epochs = 100, batch_size = 32)

"""## Predicting the test_data"""

predicted_stock_price = regressor.predict(x_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

predicted_stock_price[:5]

y_test

predicted_stock_price=pd.DataFrame(predicted_stock_price)
predicted_stock_price.info()

"""## Ploting the actual price vs the predicted price"""

plt.figure(figsize=(20,10))
plt.plot(y_test, color = 'red', label = 'Real TCS Stock Price')
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted TCS Stock Price')
plt.title('TCS Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('TCS Stock Price')
plt.legend()
plt.show()
plt.savefig('Stock.png')

